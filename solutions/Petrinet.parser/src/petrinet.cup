package parser;

import src.StructureCreation;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.*;

/** Parser for Petri nets connected to MPS. */

// Keywords
terminal PETRINET;   // "petrinet"
terminal PLACE;      // "place"
terminal TRANSITION; // "transition"

// Identifiers and Numbers
terminal String IDENTIFIER; // name
terminal Integer NUMBER;

// Separators
terminal OPEN_PAR;    // (
terminal CLOSE_PAR;   // )
terminal OPEN_BRACE;  // {
terminal CLOSE_BRACE; // }
terminal COLON;       // :
terminal COMMA;       // ,
terminal ARROW;       // =>

// non-terminals
non terminal SNode petrinet;
non terminal List<SNode> item_list;
non terminal SNode item;
non terminal SNode place;
non terminal SNode transition;
non terminal SNode place_ref;
non terminal List<SNode> ref_list;

// Grammar
start with petrinet;

// Rules
petrinet ::= PETRINET IDENTIFIER:n OPEN_BRACE item_list:l CLOSE_BRACE 
      {: RESULT = StructureCreation.createPetrinet(n,l); :}
    ;

item_list ::= item_list:l item:i
      {: ArrayList<SNode> res = new ArrayList(/*l*/); res.add(i); RESULT = res; :}
    | item:i
      {: ArrayList<SNode> res = new ArrayList(); res.add(i); RESULT = res; :}
    ;

item ::= place:p
      {: RESULT = p; :}
    | transition:t 
      {: RESULT = t; :}
    ;

place ::= PLACE IDENTIFIER:n OPEN_PAR NUMBER:i CLOSE_PAR
      {: RESULT = StructureCreation.createPlace(n,i); :}
    ;

transition ::= TRANSITION IDENTIFIER:n COLON ref_list:in ARROW ref_list:out
      {: RESULT = StructureCreation.createTransition(n); :}
    ;

ref_list ::= ref_list:l COMMA place_ref:r
      {: RESULT = new ArrayList(); :}
    | place_ref:r
      {: RESULT = new ArrayList(); :}
    ;

place_ref ::= IDENTIFIER:n {: RESULT = null; :}
    ;