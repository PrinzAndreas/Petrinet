TODO list for development of Petrinet in MPS
- create text input (copy in)
--> You can create an action that reads the file and then using smodel builds the necessary models.
--> find out which menu to use, maybe right-mouse context menu on solution? currently on Tools
--> using https://github.com/petitparser/java-petitparser or https://javacc.github.io/javacc/
--> maybe http://www2.cs.tum.edu/projects/cup/ and https://jflex.de/
- build debugger for Petrinet runtime (debug language) - compare with Eclipse CDT bridge, WatchProviderContext, IDebugStrategy
  - Debugger = abstract exec engine (set breakpoint, step, run), in transf: also translate debug info (if exec)
  - debugger.steps: single, into, out, watch (value)
  - stack frames? define by structure of statements
  - watches: hide system-level variables?
--> It depends on whether you are generating BaseLanguage or not. With the Java debugger being embedded in MPS a BaseLanguage-targetting language is easy to support debugging for. Otherwise you need to implement integration with the debugger of the platform that you are generating into. More on the topic can be found at https://www.jetbrains.com/help/mps/2020.3/debugger.html
- Introduce unit tests
--> Sure, the voicemenu sample (git@github.com:vaclav/voicemenu.git) contains a simple test language example.
- create plugin / standalone
- create text output (copy out)
- editor: make sure it works with only typing
- editor: recheck context menu
- add possibility to comment lines
- better handling of empty transition in/out lists
- create 5 philosophers
