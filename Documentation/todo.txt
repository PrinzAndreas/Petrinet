TODO list for development of Petrinet in MPS
- create text input (copy in)
--> use MPS creation routines directly in cup parser
--> create an action that builds from flex and cup: beautify and get output from script run
--> find Petrinet text file in current module/model
--> for CUP/FLEX build, find script file in project (see mail Artem)
- build debugger for Petrinet runtime (debug language) - compare with Eclipse CDT bridge, WatchProviderContext, IDebugStrategy
  - Debugger = abstract exec engine (set breakpoint, step, run), in transf: also translate debug info (if exec)
  - debugger.steps: single, into, out, watch (value)
  - stack frames? define by structure of statements
  - watches: hide system-level variables?
--> It depends on whether you are generating BaseLanguage or not. With the Java debugger being embedded in MPS a BaseLanguage-targetting language is easy to support debugging for. Otherwise you need to implement integration with the debugger of the platform that you are generating into. More on the topic can be found at https://www.jetbrains.com/help/mps/2020.3/debugger.html
- Introduce unit tests
--> Sure, the voicemenu sample (git@github.com:vaclav/voicemenu.git) contains a simple test language example.
- create plugin / standalone - see email Vaclav from 6.4. 9:33
- check that build and create works directly after download from git - adapt readme
- create text output (copy out)
- editor: make sure it works with only typing
- editor: recheck context menu
- add possibility to comment lines
- better handling of empty transition in/out lists
- create 5 philosophers
- add constraint that Petrinet names have to be distinct
- add constraint that used places must come before transitions, maybe introduce order: first places, then transitions